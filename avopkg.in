#!/bin/sh

#  Avogadro Package Manager v 1.0
#  Copyright (C) 2010 Konstantin Tokarev
#
#  For more information about Avogadro, see
#  <http://avogadro.openmolecules.net/>
#
#  Permission to use, copy, modify, distribute, and sell this software and its
#  documentation for any purpose is hereby granted without fee, provided that
#  the above copyright notice appear in all copies and that both that
#  copyright notice and this permission notice appear in supporting
#  documentation.
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  Avopkg is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE WARRANTY
#  OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

# -----    Configured on Avogadro build     ----- #
  PREFIX="@AVOPKG_PREFIX@"
  LIB_DIR="lib@LIB_SUFFIX@"
  SHARE_DIR="@SHARE_INSTALL_PREFIX@"
  PLUGIN_DIR="avogadro@Plugin_Version@"
  PYTHON_ENABLED="@ENABLE_PYTHON@"
  IS_UNIX="@UNIX@"
  IS_MAC="@APPLE@"
  SYSTEM_NAME="@CMAKE_SYSTEM_NAME@"
  SIZEOF_VOID_P="@CMAKE_SIZEOF_VOID_P@"
# ----- End of configured on Avogadro build ----- #

# Settings
PACK_CMD="tar czf"
EXTRACT_CMD="tar xzf"
EXTRACT_ONE_CMD="tar xzf"
PKG_EXT="avo"
MANIFEST_EXT="mf"
DB_FILE="$HOME/.avogadro/plugins"

# Helper functions

# /**
#  * Returns value of variable from package configuration
#  * @param $1 package description file name
#  * @param $2 variable name
#  * @returns variable value (may NOT contain spaces!)
#  */
getVar()
{
    #extract last field of string using ' ' as delimiter
	echo `cat $1 | grep $2 | awk '{print $NF}'`
}

# /**
#  * Returns value of multi-string variable from package configuration
#  * @param $1 package description file name
#  * @param $2 variable name
#  * @returns variable value (may contain spaces!)
#  */
getMultiVar()
{
    #extract last field of string using ':' as delimiter
	echo `cat $1 | grep $2 | awk -F':' '{print $NF}'`
}

# /**
#  * Returns value of boolean variable from package configuration
#  * @param $1 package description file name
#  * @param $2 variable name
#  * @returns 0 if string $2 was found in file $1
#  */
getBoolVar()
{    
    echo test x`cat $1 | grep $2` != x
}

# /**
#  * Asks user for string input and returns default is input is empty 
#  * @param $1 default value
#  * @returns string typed by user or default value (may contain spaces!)
#  */
readString()
{
    read string
    if test "x$string" = "x"
    then
        string=$1
    fi
    echo "$string"
}

# /**
#  * Prints all available parameters of script
#  */
printUsage()
{
   echo "Usage:"
   echo " "`basename $0`" filename                Install package"
   echo " "`basename $0`" -f filename             Force installation"
   echo " "`basename $0`" -pack manifest          Create new package"
   echo " "`basename $0`" -wizard [package_name]  Interactively create new package manifest"
   echo " "`basename $0`" -info filename          Show information about package in filename"
   echo " "`basename $0`" -query [package_name]   Show information about installed package"
   echo "Type 'man "`basename $0`"' for more details"
}

# /**
#  * Copies list of pre-installed plugin files to user directory
#  */
initDB()
{
    if ! test -f "$DB_FILE"
    then
        cp "$PREFIX/$SHARE_DIR/libavogadro/plugins" "$DB_FILE"
    fi    
}

# Main script

echo "Avopkg v1.0"

# Running without args is senseless
if test "x$1" = "x"
then
    printUsage
    exit 255
fi

if test "$1" = "-wizard"
then
            ########## Create manifest ##########

    echo "This wizard will help you to create description file for new package"
    echo "Default values of answers will be shown in []"
    echo -n "    Press ENTER to continue"
    read buffer
    echo

    # Check if we are given package name
    batch_mode=0
    if test "x$2" != "x"
    then
        package="$2"
        manifest=$package.$MANIFEST_EXT
        batch_mode=1
    else
        default_package="`basename $PWD`"
        echo -n "0. Name of package (try to avoid spaces) [$default_package]:"
        package=$(readString "$default_package")

        # Check if manifest already exists
        manifest=$package.$MANIFEST_EXT
        if test -f $manifest
        then
            echo -n "File $manifest already exisits. Overwrite(y/n)? [n]"
            result=$(readString "n")
            if test $result != y
            then
                exit 0
            fi
        fi
    fi    
    
    echo -n "1. Full name of your plugin [$package]:"
    name=$(readString "$package")
    
    echo -n "2. Author's name []:"
    author=$(readString "")

    echo -n "" > $manifest # Clean old manifest
    echo "Name: $name" >> $manifest
    echo "Author: $author" >> $manifest
    echo "Package: $package" >> $manifest

    echo -n "3. Is it a Python plugin (y/n)? [n]"
    python=$(readString "n")
    if test "$python" = "y"
    then
        echo "Python" >> $manifest
        
        echo -n "4. List of files to distribute [`ls *.py`]:"
        files=$(readString "`ls *.py`")

        echo "5. Choose a category for your Python plugin from list:"
        echo "* engineScripts\n* extensionScripts\n* toolScripts"
        category=$(readString "")
    else    
        echo -n "4. List of files to distribute [`ls *.so`]:"
        files=$(readString "`ls *.so`")

        echo "5. Choose a category for your plugin from list:"
        echo "* colors\n* engines\n* extensions\n* tools"
        echo "* contrib\n* you may add new if no other is suitable"
        echo -n "Category [contrib]:"
        category=$(readString "contrib")
    fi

    echo "Files: $files" >> $manifest
    echo "Category: $category" >> $manifest

    # In make chain don't ask anything else
    if test $batch_mode = 1
    then
      exit 0
    fi
    
    # Ready to build
    echo "Manifest $manifest was successfully created"
    echo -n "Build package $package.$PKG_EXT(y/n)? [y]"
    build=$(readString "y")
    if test "$build" = "y"
    then
        echo
        # Recursive call
        $0 -pack $manifest
        # On success ask for installation
        if test $?
        then
            echo
            echo -n "Install package $package.$PKG_EXT(y/n)? [y]"
            install=$(readString "y")
            if test "$install" = "y"
            then
                echo
                # Recursive call
                $0 $package.$PKG_EXT
            else
                echo "Done!"
            fi
        fi
    else
        echo "Done!"
    fi
    exit 0
fi

if test "$1" = "-info"
then
        ########## Show package metadata ##########
	
    if test "x$2" = "x"
    then
        printUsage
        exit 255
    fi

    if test -f $2
    then
        package=`basename $2 .$PKG_EXT`
    else
        printUsage
        exit 255
    fi
	
    # Create temporary dir and unpack manifest
    rm -rf .tmp
    mkdir .tmp
    cd .tmp
	manifest=$package.$MANIFEST_EXT
    $EXTRACT_ONE_CMD ../$2 $package/$manifest
    if ! test $? = 0
    then
        echo "$1 is not an Avogadro plugin package!"
        exit 1
    fi
	
	cd $package
	echo "Avogadro plugin \"$(getMultiVar $manifest Name)\""
	if !($(getBoolVar $manifest Python))
	then
	  if test $(getVar $manifest SizeofVoidP) = 4
	  then
	    echo "  for $(getVar $manifest System) 32-bit"
	  fi
	  if test $(getVar $manifest SizeofVoidP) = 8
	  then
	    echo "  for $(getVar $manifest System) 64-bit"
	  fi
	else
	  echo "  OS-independent (Python)"
	fi
	echo "  by $(getMultiVar $manifest Author)"
    echo "  Provided files:"
    for file in $(getMultiVar $manifest Files)
    do
        echo "    $file"
    done
    echo "  will be installed to \'$(getVar $manifest Category)\' directory"
	
    # Clean up
    cd ../..
    rm -rf .tmp

    exit 0	
fi

if test "$1" = "-query"
then
     ####### Show package metadata from registry #######
    N=`cat "$DB_FILE" | grep "\[$2\]" | awk '{print $NF}'`
    echo $N
    if test "x$N" = "x"
    then
        echo "Package $2 is not installed"
        exit 0
    fi

    cat "$DB_FILE" | grep -C $N "\[$2\]"
    exit 0
fi    

if test "$1" = "-pack"
then
            ########## Build package ##########

    if test "x$2" = "x"
    then
        printUsage
        exit 255
    fi

    if test -f $2
    then
        echo "Building package for $(getMultiVar $2 Name) ..."
    else
        printUsage
        exit 255
    fi
   
    package=$(getVar $2 Package)
    files="$(getMultiVar $2 Files)"
    rm -rf .tmp
    mkdir -p .tmp/$package
    cp $2 .tmp/$package/$package.$MANIFEST_EXT
	
	if !($(getBoolVar $2 Python))
	then
		# Add OS & CPU architecture information to manifest 
		# (if not already specified)
		if test x$(getVar $2 System) = x
		then
			echo "System: $SYSTEM_NAME" >> .tmp/$package/$package.$MANIFEST_EXT
		fi
		if test x$(getVar $2 SizeofVoidP) = x
		then
			echo "SizeofVoidP: $SIZEOF_VOID_P" >> .tmp/$package/$package.$MANIFEST_EXT
		fi
	fi
	
	# Copy installable content
    cp -t .tmp/$package $files # Will fail if some file is missing
	
    cd .tmp
    $PACK_CMD ../$package.$PKG_EXT $package
    cd ..
    rm -rf .tmp

    echo "Done!"
    exit 0
else
            ########## Install package ########## 
	
	# Check -f (ignore OS and arch)
	if test "$1" = "-f"
	then
		force=1
		filename=$2
	else
		force=0
		filename=$1
	fi

    if test -f $filename
    then
        package=`basename $filename .$PKG_EXT`
        echo Unpacking $filename...           
    else
        printUsage
        exit 255
    fi

    # Create temporary dir and unpack content
    rm -rf .tmp
    mkdir .tmp
    cd .tmp
    $EXTRACT_CMD ../$filename
    if ! test $? = 0
    then
        echo "$1 is not an Avogadro plugin package!"
        echo "Installation failed."
        exit 1
    fi

    # Check manifest
    cd $package
    manifest=$package.$MANIFEST_EXT
    if ! test -f $manifest
    then
        echo "Manifest $manifest is missing in package!"
        echo "Installation failed."
        exit 2
    fi
        
    files=$(getMultiVar $manifest Files)
    category=$(getVar $manifest Category)
    reinstall=0

    # Check for possible overwrites
    initDB
    for file in $files
    do
        if test `cat "$DB_FILE" | grep -c "$category/$file"` != 0
        then
            # File already exists in some package, figure out in what
            installed_package=`cat "$DB_FILE" | grep "$category/$file" | awk '{print $NF}'`

            # If package was previously installed, every file will be
            # overwritten. But we want to warn once
            if test $reinstall = 0
            then
                if test $installed_package = $package
                then
                    echo "WARNING! Package $package is already installed."
                    reinstall=1
                else
                    echo "WARNING! File $file is already installed in package $installed_package."
                fi

                # -f key forces installation
                if test $force = 0
                then
                    echo "Use -f to owerwrite it."
                    exit 6
                else
                    echo "Overwriting it since -f is given."
                fi
            fi
        fi
    done
	
    # Find out where to install package
    if ($(getBoolVar $manifest Python))
    then
        #Check Python support in Avogadro
        if test $PYTHON_ENABLED = "OFF"
        then
            echo "Plugin $package needs Python, but Avogadro was compiled"
            echo "without Python support. To install and use this plugin, you need to change CMake"
            echo "option ENABLE_PYTHON to ON value, resolve dependencies and re-compile Avogadro"
            echo
            echo "Installation failed."
            exit 3
        fi
        
        echo -n Installing Python plugin $package
        if test $USER = root
        then
            echo " for all users..."
            dest="$PREFIX/share/libavogadro/$category"
        else
            echo " for user $USER"
            if test "$IS_MAC" = 1
            then
                dest="$HOME/Library/Application Support/Avogadro/$category"
            else
                dest="$HOME/.avogadro/$category"
            fi
        fi
    else
		if test $force = 0
		then
			# Verify OS
			if test $(getVar $manifest System) != $SYSTEM_NAME
			then
				echo "This plugin was built for $(getVar $manifest System)"
				echo "Can't install it on $SYSTEM_NAME"
				exit 4
			fi
	
			# Verify CPU architecture
			arch=$(getVar $manifest SizeofVoidP)
			if test $arch != $SIZEOF_VOID_P
			then
				echo "CPU architecture doesn't match"
				if test $SIZEOF_VOID_P = 4
				then
					echo "Arch of avogadro: x86"
				fi
				if test $SIZEOF_VOID_P = 8
				then
					echo "Arch of avogadro: x86_64"
				fi
				if test $arch = 4
				then
					echo "Arch of plugin: x86"
				fi
				if test $arch = 8
				then
					echo "Arch of plugin: x86_64"
				fi
				exit 5
			fi
		fi
		
        echo -n Installing plugin $package
        if test $USER = root
        then
            echo " for all users..."
            dest="$PREFIX/$LIB_DIR/$PLUGIN_DIR/$category"
        else
            echo " for user $USER"
            if test "$IS_MAC" = 1
            then
                dest="$HOME/Library/Application Support/$PLUGIN_DIR/Plugins/$category"
            else
                dest="$HOME/.$PLUGIN_DIR/plugins/$category"
            fi
        fi
    fi

    # Copy files
    if ! test -d "$dest"
    then
        echo Creating directory $dest...
        mkdir -p "$dest"
    fi
    echo "Copying files to $dest..."
    cp -t "$dest" $files

    # Register plugin
    echo >> "$DB_FILE"
    echo -n "[$package] " >> "$DB_FILE"
    cat $manifest | grep -v "Package:" | grep -v "System:" | grep -v \
        "SizeofVoidP:" | grep -v "Files:" > .temp
    for file in $files
    do
        echo $category/$file $package >> .temp
    done
    cat .temp | grep -c "" >> "$DB_FILE"
    cat .temp >> "$DB_FILE"

    # Clean up
    cd ../..
    rm -rf .tmp
    
    echo "Done!"
    exit 0
fi
